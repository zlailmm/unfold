void __VERIFIER_error(){}














void abort(void);
void reach_error(){}

typedef struct _barrier {
int thread_count;

int seen;

          pthread_mutex_t lock;
    pthread_cond_t sig;
} Barrier;

void barrier_init( Barrier *b, int thread_count ) {
    (!(thread_count > 1) ? reach_error() : (void)0);
    b->thread_count = thread_count;
    b->seen = 0;
    pthread_mutex_init( &b->lock, 0 );
    pthread_cond_init( &b->sig, 0 );
}

void barrier_destroy( Barrier *b ) {
    pthread_mutex_destroy( &b->lock );
    pthread_cond_destroy( &b->sig );
}




int 
    barrier_wait( Barrier *b ) {
    (!(b->seen < b->thread_count) ? reach_error() : (void)0);
    pthread_mutex_lock( &b->lock );
    ++b->seen;
    if ( b->seen == b->thread_count ) {
        pthread_cond_broadcast( &b->sig );
        pthread_mutex_unlock( &b->lock );
        return 
              1
                  ;
    }
    while ( b->seen < b->thread_count ) {
        pthread_cond_wait( &b->sig, &b->lock );
    }
    pthread_mutex_unlock( &b->lock );
    return 
          0
               ;
}



typedef struct {
int tid;

    Barrier *b1, *b2;
   } Arg;

volatile 
        int 
             pre[ 3 ], in[ 3 ], post[ 3 ],
              sig1[ 3 ], sig2[ 3 ];

void *worker_fn( void *arg ) {
int sig = 0;

    Arg *a = arg;
    const int tid ;
 tid = a->tid;

    pre[ tid ] = 
                1
                    ;
    {
int i = 0;

while( i < 3){ {
        (!(!in[ i ]) ? reach_error() : (void)0);
        (!(!post[ i ]) ? reach_error() : (void)0);
    } ++i ;}
}

    sig1[ tid ] = barrier_wait( a->b1 );

       {
int i = 0;

while( i < 3){ {
        (!(pre[ i ]) ? reach_error() : (void)0);
        sig =sig + sig1[ i ];
    } ++i ;}
}
    (!(sig <= 1) ? reach_error() : (void)0);
    (!(!in[ tid ]) ? reach_error() : (void)0);
    in[ tid ] = 
               1
                   ;

    sig2[ tid ] = barrier_wait( a->b2 );

    (!(!post[ tid ]) ? reach_error() : (void)0);
    post[ tid ] = 
                 1
                     ;

    sig = 0;
    {
int i = 0;

while( i < 3){ {
        (!(pre[ i ]) ? reach_error() : (void)0);
        (!(in[ i ]) ? reach_error() : (void)0);
        sig =sig + sig1[ i ];
    } ++i ;}
}
    (!(sig == 1) ? reach_error() : (void)0);

    sig = 0;
    {
int i = 0;

while( i < 3){ {
        sig =sig + sig2[ i ];
    } ++i ;}
}
    (!(sig <= 1) ? reach_error() : (void)0);

    return 0;
}

int main() {
pthread_t worker[ 3 - 1 ];

    Barrier b1, b2;
    Arg a[ 3 ];
    {
int i = 0;

while( i < 3){ {
        a[ i ].b1 = &b1;



        a[ i ].b2 = &b1;

        a[ i ].tid = i;
    } ++i ;}
}
    barrier_init( &b1, 3 );



       {
int i = 0;

while( i < 3 - 1){
        pthread_create( &worker[ i ], 0, &worker_fn, &a[ i ] ); ++i ;}
}
    worker_fn( &a[ 3 - 1 ] );
    {
int i = 0;

while( i < 3 - 1){
        pthread_join( worker[ i ], 0 ); ++i ;}
}
    int sig = 0;
    {
int i = 0;

while( i < 3){ {
        (!(post[ i ]) ? reach_error() : (void)0);
        sig =sig + sig2[ i ];
    } ++i ;}
}
    (!(sig == 1) ? reach_error() : (void)0);
}
